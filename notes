npm init -y
npm install express @elastic/elasticsearch

curl -X PUT "localhost:9200/myindex" -H 'Content-Type: application/json' -d'
{
  "mappings": {
    "properties": {
      "creation_time": {
        "type": "date"
      },
      "message": {
        "type": "text"
      }
    }
  }
}
'
curl -X POST "http://localhost:9200/_cluster/reroute?retry_failed=true&pretty"


curl -X POST "localhost:9200/myindex/_doc/1" -H 'Content-Type: application/json' -d'
{
  "creation_time": "2024-06-24T10:00:00Z",
  "message": "Document 1"
}
'

curl -X POST "localhost:9200/last-minute/_doc/" -H 'Content-Type: application/json' -d'
{
  "creation_time": "2024-06-24T12:34:56Z",
  "message": "This is a test message"
}
'
curl -X POST "http://localhost:9200/_cluster/reroute" -H 'Content-Type: application/json' -d'
{
  "commands": [
    {
      "allocate_stale_primary": {
        "index": "your_index_name",
        "shard": shard_number,
        "node": "target_node_name",
        "accept_data_loss": true
      }
    }
  ]
}

curl -X PUT "http://localhost:9200/_all/_settings" -H 'Content-Type: application/json' -d'
{
  "settings": {
    "index.allocation.max_retries": "3"
  }
}
'

docker run -d -p 9200:9200 -p 9300:9300 \
  -e "discovery.type=single-node" \
  docker.elastic.co/elasticsearch/elasticsearch:8.5.0

curl -X PUT "http://localhost:9200/_cluster/settings" -H 'Content-Type: application/json' -d'
{
  "persistent": {
    "cluster.routing.allocation.enable": "all"
  }
}
'
app.get('/count', async (req, res) => {
    try {
        const { body } = await client.count({
            index: 'myindex'  // Remplacez 'myindex' par le nom de votre index
        });
        const count = body.count;
        res.json({ count: count });
    } catch (error) {
        console.error('Error retrieving data from Elasticsearch:', error);
        res.status(500).send('Error retrieving data from Elasticsearch');
    }

const express = require('express');
const { Client } = require('@elastic/elasticsearch');

const app = express();
const port = 3000;

// Configuration du client Elasticsearch
const client = new Client({ node: 'http://localhost:9200' });

app.get('/count', async (req, res) => {
    try {
        // Effectue une requête count sur l'index 'myindex'
        console.log('Sending count request to Elasticsearch...');
        const response = await client.count({
            index: 'myindex'  // Remplacez 'myindex' par le nom de votre index
        });

        // Log de la réponse complète pour débogage
        console.log('Elasticsearch response:', response);

        // Vérifiez si la réponse contient la propriété body
        if (!response.body) {
            throw new Error('No body in response from Elasticsearch');
        }

        // Extraire le count de la réponse
        const count = response.body.count;
        
        // Vérification si count est défini
        if (count === undefined) {
            throw new Error('Count is undefined');
        }

        res.json({ count: count });
    } catch (error) {
        console.error('Error retrieving data from Elasticsearch:', error);

        // Renvoyer une erreur plus descriptive
        res.status(500).json({
            message: 'Error retrieving data from Elasticsearch',
            error: error.message,
            stack: error.stack
        });
    }
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});
