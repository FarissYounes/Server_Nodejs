search_response = es.search(index=index_name, body=search_body)

# Vérifier si des documents ont été trouvés
if search_response['hits']['total']['value'] > 0:
    for hit in search_response['hits']['hits']:
        doc_id = hit['_id']
        # Supprimer le document par ID
        delete_response = es.delete(index=index_name, id=doc_id)
        print(f"Document avec ID {doc_id} supprimé : {delete_response['result']}")
else:
    print("Aucun document trouvé avec cet attribut.")

except exceptions.ConnectionError as e:
    print(f'Error connecting to Elasticsearch: {e}')
except exceptions.NotFoundError as e:
    print(f'Document not found: {e}')
except exceptions.RequestError as e:
    print(f'Error in the request: {e}')
except exceptions.ElasticsearchException as e:
    print(f'Elasticsearch error: {e}')
except Exception as e:
    print(f'An unexpected error occurred: {e}')

except exceptions.ConnectionError as e:
    print(f'Error connecting to Elasticsearch: {e}')
except exceptions.ElasticsearchException as e:
    print(f'Elasticsearch error: {e}')
except Exception as e:
    print(f'An unexpected error occurred: {e}')


npm init -y
npm install express @elastic/elasticsearch
npm install chart.js

curl -X PUT "localhost:9200/myindex" -H 'Content-Type: application/json' -d'
{
  "mappings": {
    "properties": {
      "creation_time": {
        "type": "date"
      },
      "message": {
        "type": "text"
      }
    }
  }
}
'
curl -X POST "http://localhost:9200/_cluster/reroute?retry_failed=true&pretty"


curl -X POST "localhost:9200/myindex/_doc/1" -H 'Content-Type: application/json' -d'
{
  "creation_time": "2024-06-24T10:00:00Z",
  "message": "Document 1"
}
'

curl -X POST "localhost:9200/last-minute/_doc/" -H 'Content-Type: application/json' -d'
{
  "creation_time": "2024-06-24T12:34:56Z",
  "message": "This is a test message"
}
'
curl -X POST "http://localhost:9200/_cluster/reroute" -H 'Content-Type: application/json' -d'
{
  "commands": [
    {
      "allocate_stale_primary": {
        "index": "your_index_name",
        "shard": shard_number,
        "node": "target_node_name",
        "accept_data_loss": true
      }
    }
  ]
}

curl -X PUT "http://localhost:9200/_all/_settings" -H 'Content-Type: application/json' -d'
{
  "settings": {
    "index.allocation.max_retries": "3"
  }
}
'

docker run -d -p 9200:9200 -p 9300:9300 \
  -e "discovery.type=single-node" \
  docker.elastic.co/elasticsearch/elasticsearch:8.5.0

curl -X PUT "http://localhost:9200/_cluster/settings" -H 'Content-Type: application/json' -d'
{
  "persistent": {
    "cluster.routing.allocation.enable": "all"
  }
}
'
app.get('/count', async (req, res) => {
    try {
        const { body } = await client.count({
            index: 'myindex'  // Remplacez 'myindex' par le nom de votre index
        });
        const count = body.count;
        res.json({ count: count });
    } catch (error) {
        console.error('Error retrieving data from Elasticsearch:', error);
        res.status(500).send('Error retrieving data from Elasticsearch');
    }

const express = require('express');
const { Client } = require('@elastic/elasticsearch');

const app = express();
const port = 3000;

// Configuration du client Elasticsearch
const client = new Client({ node: 'http://localhost:9200' });

app.get('/count', async (req, res) => {
    try {
        // Effectue une requête count sur l'index 'myindex'
        console.log('Sending count request to Elasticsearch...');
        const response = await client.count({
            index: 'myindex'  // Remplacez 'myindex' par le nom de votre index
        });

        // Log de la réponse complète pour débogage
        console.log('Elasticsearch response:', response);

        // Vérifiez si la réponse contient la propriété body
        if (!response.body) {
            throw new Error('No body in response from Elasticsearch');
        }

        // Extraire le count de la réponse
        const count = response.body.count;
        
        // Vérification si count est défini
        if (count === undefined) {
            throw new Error('Count is undefined');
        }

        res.json({ count: count });
    } catch (error) {
        console.error('Error retrieving data from Elasticsearch:', error);

        // Renvoyer une erreur plus descriptive
        res.status(500).json({
            message: 'Error retrieving data from Elasticsearch',
            error: error.message,
            stack: error.stack
        });
    }
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});

////////////////

// Endpoint to get records from the last day
app.get('/records/day', async (req, res) => {
    try {
        const result = await getRecords('now-1d/d');
        res.json(result);
    } catch (error) {
        res.status(500).send(error.toString());
    }
});

// Endpoint to get records from the last hour
app.get('/records/hour', async (req, res) => {
    try {
        const result = await getRecords('now-1h/h');
        res.json(result);
    } catch (error) {
        res.status(500).send(error.toString());
    }
});

// Endpoint to get records from the last minute
app.get('/records/minute', async (req, res) => {
    try {
        const result = await getRecords('now-1m/m');
        res.json(result);
    } catch (error) {
        res.status(500).send(error.toString());
    }
});

// Function to get records based on the time range
async function getRecords(timeRange) {
    const { body } = await client.search({
        index: 'web-page-info',
        body: {
            query: {
                range: {
                    creation_time: {
                        gte: timeRange
                    }
                }
            }
        }
    });
    return body.hits.hits;
}
:::::::::::::::::::::::::::::
/* public/css/styles.css */

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

th, td {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
}

th {
    background-color: #f2f2f2;
}

tr:nth-child(even) {
    background-color: #f9f9f9;
}

tr:hover {
    background-color: #f1f1f1;
}

/* Styling for buttons */
.button-container {
    text-align: center; /* Center aligns the buttons */
    margin-top: 20px; /* Adds space above the buttons */
}

.button-container button {
    padding: 10px 20px; /* Adds padding inside the buttons */
    margin: 0 10px; /* Adds space between the buttons */
    font-size: 16px; /* Sets the font size */
    background-color: #dc3545; /* Red background color */
    color: #fff; /* White text color */
    border: none; /* Removes border */
    cursor: pointer; /* Changes cursor to pointer on hover */
}

.button-container button:hover {
    background-color: #c82333; /* Darker red background color on hover */
}
